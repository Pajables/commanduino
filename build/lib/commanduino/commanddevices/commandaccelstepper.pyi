from . import CommandDevice

class CommandAccelStepper(CommandDevice):
    def __init__(self, speed: float, max_speed: float, acceleration: float, enabled_acceleration: bool = True,
                 reverted_direction: bool = False): ...
    def wait_until_idle(self) -> None: ...
    def move_to(self, steps: int, wait: bool = True) -> None: ...
    def move(self, steps: int, wait: bool = True) -> None: ...
    def stop(self, wait: bool = True) -> None: ...

    # Acceleration
    def get_acceleration(self) -> float: ...
    def set_acceleration(self, steps_per_second_per_second: float) -> None: ...

    # Current position
    def get_current_position(self) -> float: ...
    def set_current_position(self, steps: float) -> None: ...

    # Distance to go
    def get_distance_to_go(self) -> float: ...

    # Enabled acceleration
    enabled_acceleration: bool
    def enable_acceleration(self) -> None: ...
    def disable_acceleration(self) -> None: ...

    # Moving state
    @property
    def is_moving(self) -> bool: ...
    def get_moving_state(self) -> bool: ...

    # Max speed
    def get_max_speed(self) -> float: ...
    def set_max_speed(self, steps_per_second: float) -> None: ...

    # Speed
    # _set_speed() sets the speed in the Arduino before actually moving the motor [e.g. in move(), move_to()]
    # set_running_speed sets the value of the running_speed variable, used for set_speed before normal movements
    def get_speed(self) -> float: ...
    def _set_speed(self, steps_per_second: float) -> None: ...

    # Running speed
    def set_running_speed(self, steps_per_second: int) -> None: ...

    # Target position
    def get_target_position(self) -> float: ...
